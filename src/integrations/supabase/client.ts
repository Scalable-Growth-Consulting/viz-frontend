// This file is automatically generated. Do not edit it directly.
import { createClient, type FunctionInvokeOptions } from '@supabase/supabase-js';
import type { Database } from './types';

// --- Custom fetch with timeout ---
function fetchWithTimeout(resource: RequestInfo, options: RequestInit & { timeout?: number } = {}) {
  const { timeout = 240000, ...rest } = options;
  return new Promise<Response>((resolve, reject) => {
    const controller = new AbortController();
    const id = setTimeout(() => controller.abort(), timeout);
    fetch(resource, { ...rest, signal: controller.signal })
      .then((response) => {
        clearTimeout(id);
        resolve(response);
      })
      .catch((err) => {
        clearTimeout(id);
        reject(err);
      });
  });
}
// --- End custom fetch ---

const SUPABASE_URL = "https://aemqjpcbtgdnfypgkkhx.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFlbXFqcGNidGdkbmZ5cGdra2h4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDgyNTYyNDAsImV4cCI6MjA2MzgzMjI0MH0.Ee5EHaSfPAf58thfUe_LV5gRlatuqBUXZEZmXTmDvHo";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create Supabase client with local functions URL in development
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true
    },
    global: {
      fetch: fetchWithTimeout
    }
  }
);

// Override the functions URL in development
// if (process.env.NODE_ENV === 'development') {
//   supabase.functions.setEndpoint('http://localhost:54321/functions/v1');
// }

// Generic type for Supabase function responses
export type SupabaseFunctionResponse<T> = {
  data: T | null;
  error: { message: string; status?: number } | null;
};

// --- Retry logic for function calls ---
export async function invokeWithRetry<T>(fnName: string, options: FunctionInvokeOptions, maxRetries = 3): Promise<SupabaseFunctionResponse<T>> {
  let attempt = 0;
  let delay = 500;
  while (attempt < maxRetries) {
    try {
      const result = await supabase.functions.invoke<T>(fnName, options);
      if (result.error && (result.error.status && result.error.status >= 500 || result.error.status === 0)) {
        throw result.error;
      }
      return result as SupabaseFunctionResponse<T>;
    } catch (err) {
      attempt++;
      if (attempt >= maxRetries) throw err;
      await new Promise(res => setTimeout(res, delay));
      delay *= 2; // Exponential backoff
    }
  }
}
// --- End retry logic ---